{
 "add_total_row": 1,
 "columns": [
  {
   "fieldname": "customer",
   "fieldtype": "Link",
   "label": "\u0627\u0644\u0639\u0645\u064a\u0644",
   "options": "Customer",
   "width": 80
  },
  {
   "fieldname": "customer_name",
   "fieldtype": "Data",
   "label": "\u0627\u0633\u0645 \u0627\u0644\u0639\u0645\u064a\u0644",
   "width": 230
  },
  {
   "fieldname": "customer_group",
   "fieldtype": "Link",
   "label": "\u0645\u062c\u0645\u0648\u0639\u0629 \u0627\u0644\u0639\u0645\u0644\u0627\u0621",
   "options": "Customer Group",
   "width": 120
  },
  {
   "fieldname": "payment_terms",
   "fieldtype": "Data",
   "label": "\u0634\u0631\u0648\u0637 \u0627\u0644\u062f\u0641\u0639",
   "width": 100
  },
  {
   "fieldname": "credit_limit",
   "fieldtype": "Currency",
   "label": "\u0627\u0644\u062d\u062f \u0627\u0644\u0625\u0626\u062a\u0645\u0627\u0646\u064a",
   "width": 120
  },
  {
   "fieldname": "balance_wo_so",
   "fieldtype": "Currency",
   "label": "\u0627\u0644\u0631\u0635\u064a\u062f \u0628\u062f\u0648\u0646 \u0627\u0644\u0623\u0648\u0627\u0645\u0631",
   "width": 140
  },
  {
   "fieldname": "unbilled_sales_orders",
   "fieldtype": "Currency",
   "label": "\u0623\u0648\u0627\u0645\u0631 \u063a\u064a\u0631 \u0645\u0641\u0648\u062a\u0631\u0629",
   "width": 140
  },
  {
   "fieldname": "balance_w_so",
   "fieldtype": "Currency",
   "label": "\u0627\u0644\u0631\u0635\u064a\u062f \u0645\u0639 \u0627\u0644\u0623\u0648\u0627\u0645\u0631",
   "width": 140
  },
  {
   "fieldname": "overdues",
   "fieldtype": "Currency",
   "label": "\u0627\u0644\u0645\u062a\u0623\u062e\u0631\u0627\u062a",
   "width": 110
  }
 ],
 "creation": "2024-12-24 14:30:32.645658",
 "disabled": 0,
 "docstatus": 0,
 "doctype": "Report",
 "filters": [
  {
   "default": "Today",
   "fieldname": "to_date",
   "fieldtype": "Date",
   "label": "To Date",
   "mandatory": 1,
   "wildcard_filter": 0
  },
  {
   "default": "All Balances",
   "fieldname": "show_balances",
   "fieldtype": "Select",
   "label": "Show Balances",
   "mandatory": 1,
   "options": "All Balances\nDebit Balances (w/o Orders)\nCredit Balances (w/o Orders)\nZero Balances (w/o Orders)\nDebit Balances (w Orders)\nCredit Balances (w Orders)\nZero Balances (w Orders)\nOverdue Balances\nOver-credit Balances",
   "wildcard_filter": 0
  }
 ],
 "idx": 1,
 "is_standard": "Yes",
 "letter_head": "itar",
 "letterhead": null,
 "modified": "2024-12-25 09:36:20.659435",
 "modified_by": "Administrator",
 "module": "Libya Customizations",
 "name": "Customer Balances Summary",
 "owner": "Administrator",
 "prepared_report": 0,
 "query": "WITH gl_entry AS (\nSELECT\n\tparty AS customer,\n    SUM(debit) AS debit,\n\tSUM(credit) AS credit,\n\tSUM(debit) - SUM(credit) AS balance\n\t\nFROM\n\t`tabGL Entry`\nWHERE\n\tis_cancelled = 0\nAND\n    party_type = 'Customer'\nAND\n\tposting_date <= %(to_date)s\nGROUP BY\n\tparty\n),\nsales_order_item AS (\n\tSELECT\n\t\tsales_order.customer,\n\t\tIFNULL(SUM((sales_order_item.amount - sales_order_item.billed_amt) * sales_order.grand_total / sales_order.total), 0) AS unbilled_sales_orders\n\tFROM\n\t\t`tabSales Order Item` sales_order_item\n\tINNER JOIN\n\t\t`tabSales Order` sales_order\n\tON\n\t\tsales_order_item.parent = sales_order.name\n\tWHERE\n\t\tsales_order_item.docstatus = 1\n\tAND\n\t\tsales_order.docstatus = 1\n\tAND\n\t\tsales_order.status NOT IN ('Closed', 'Completed')\n\tAND\n\t\tsales_order_item.amount - sales_order_item.billed_amt > 0\n    AND\n    \tsales_order_item.transaction_date <= %(to_date)s\n    GROUP BY\n\t\tsales_order.customer\n),\ncustomer_credit_limit AS (\n    SELECT\n        parent AS customer,\n    \tIFNULL(credit_limit, 0) AS credit_limit\n    FROM\n    \t`tabCustomer Credit Limit`\n    WHERE\n    \tparenttype = 'Customer'\n    GROUP BY\n        parent\n),\nsales_invoice AS (\n    SELECT\n        sales_invoice.customer,\n    \tIFNULL(SUM(sales_invoice.outstanding_amount), 0) AS overdues\n    FROM\n    \t`tabSales Invoice` sales_invoice\n    LEFT JOIN\n    \t(\n    \tSELECT\n    \t\tcustomer.name,\n    \t\tCOALESCE(payment_terms_template_detail.credit_days, 0) AS credit_days\n    \tFROM\n    \t\t`tabCustomer` customer\n    \tLEFT JOIN\n    \t\t`tabPayment Terms Template Detail` payment_terms_template_detail\n    \tON\n    \t\tcustomer.payment_terms = payment_terms_template_detail.parent\n    \t) customer\n    ON\n    \tsales_invoice.customer = customer.name\n    WHERE\n    \tsales_invoice.docstatus = 1\n    AND\n    \tsales_invoice.is_return = 0\n    AND\n    \tsales_invoice.outstanding_amount > 0\n    AND\n    \tDATE(DATE_ADD(NOW(), INTERVAL 2 HOUR)) >= DATE_ADD(sales_invoice.posting_date, INTERVAL customer.credit_days DAY)\n    GROUP BY\n        sales_invoice.customer\n)\nSELECT\n\tcustomer.name AS customer,\n\tcustomer.customer_name,\n\tcustomer.customer_group,\n    customer.payment_terms,\n    IFNULL(customer_credit_limit.credit_limit, 0) AS credit_limit,\n\tIFNULL(gl_entry.balance, 0) AS balance_wo_so,\n\tIFNULL(sales_order_item.unbilled_sales_orders, 0) AS unbilled_sales_orders,\n\tIFNULL(gl_entry.balance, 0) + IFNULL(sales_order_item.unbilled_sales_orders, 0) AS balance_w_so,\n    IFNULL(sales_invoice.overdues, 0) AS overdues\nFROM\n\t`tabCustomer` customer\nLEFT JOIN\n\tgl_entry\nON\n\tcustomer.name = gl_entry.customer\nLEFT JOIN\n\tsales_order_item\nON\n\tcustomer.name = sales_order_item.customer\nLEFT JOIN\n\tcustomer_credit_limit\nON\n\tcustomer.name = customer_credit_limit.customer\nLEFT JOIN\n\tsales_invoice\nON\n\tcustomer.name = sales_invoice.customer\nWHERE\n    (CASE\n        WHEN %(show_balances)s = 'All Balances' THEN TRUE\n        WHEN %(show_balances)s = 'Debit Balances (w/o Orders)' THEN ROUND(IFNULL(gl_entry.balance, 0), 2) > 0\n        WHEN %(show_balances)s = 'Credit Balances (w/o Orders)' THEN ROUND(IFNULL(gl_entry.balance, 0), 2) < 0\n        WHEN %(show_balances)s = 'Zero Balances (w/o Orders)' THEN ROUND(IFNULL(gl_entry.balance, 0), 2) = 0\n        WHEN %(show_balances)s = 'Debit Balances (w Orders)' THEN ROUND(IFNULL(gl_entry.balance, 0) + IFNULL(sales_order_item.unbilled_sales_orders, 0), 2) > 0\n        WHEN %(show_balances)s = 'Credit Balances (w Orders)' THEN ROUND(IFNULL(gl_entry.balance, 0) + IFNULL(sales_order_item.unbilled_sales_orders, 0), 2) < 0\n        WHEN %(show_balances)s = 'Zero Balances (w Orders)' THEN ROUND(IFNULL(gl_entry.balance, 0) + IFNULL(sales_order_item.unbilled_sales_orders, 0), 2) = 0\n        WHEN %(show_balances)s = 'Overdue Balances' THEN ROUND(IFNULL(sales_invoice.overdues, 0), 2) > 0\n        WHEN %(show_balances)s = 'Over-credit Balances' AND IFNULL(customer_credit_limit.credit_limit, 0) > 0 THEN ROUND(IFNULL(customer_credit_limit.credit_limit, 0), 2) < ROUND(IFNULL(gl_entry.balance, 0) + IFNULL(sales_order_item.unbilled_sales_orders, 0), 2)\n        ELSE FALSE\n    END)\nORDER BY\n\tIFNULL(gl_entry.balance, 0) + IFNULL(sales_order_item.unbilled_sales_orders, 0) DESC,\n\tcustomer.name",
 "ref_doctype": "GL Entry",
 "report_name": "Customer Balances Summary",
 "report_type": "Query Report",
 "roles": [
  {
   "role": "Accountant"
  },
  {
   "role": "Chief Sales Officer"
  },
  {
   "role": "Sales Supervisor"
  },
  {
   "role": "Sales Coordinator"
  }
 ],
 "timeout": 0
}