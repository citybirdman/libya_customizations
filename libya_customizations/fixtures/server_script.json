[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-25 09:27:06.266012",
  "module": "Libya Customizations",
  "name": "Sales Order - Permission Query",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Order",
  "script": "if not frappe.db.get_value(\"Has Role\", [[\"parent\", \"=\", frappe.session.user], ['role', \"=\", \"System Manager\"]]):\n    conditions = \"`tabSales Order`.name NOT IN (SELECT amended_from FROM `tabSales Order` WHERE amended_from IS NOT NULL)\"\n\nif frappe.db.get_value(\"Has Role\", [[\"parent\", \"=\", frappe.session.user], ['role', \"=\", \"Warehouse User\"]]):\n    conditions = \"docstatus=1 AND reservation_status='Reserve with Delivery'AND delivery_status IN ('Not Delivered', 'Partly Delivered')\"",
  "script_type": "Permission Query"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-25 09:27:06.178893",
  "module": "Libya Customizations",
  "name": "Delivery Note - Permission Query",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Delivery Note",
  "script": "if not frappe.db.get_value(\"Has Role\", [[\"parent\", \"=\", frappe.session.user], ['role', \"=\", \"System Manager\"]]):\n    conditions = \"`tabDelivery Note`.name NOT IN (SELECT amended_from FROM `tabDelivery Note` WHERE amended_from IS NOT NULL)\"",
  "script_type": "Permission Query"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-01-04 11:19:59.132553",
  "module": "Libya Customizations",
  "name": "Sales Invoice - Permission Query",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Invoice",
  "script": "if not frappe.db.get_value(\"Has Role\", [[\"parent\", \"=\", frappe.session.user], ['role', \"=\", \"System Manager\"]]):\n    conditions=\"is_opening='No'\"\n\nif not frappe.db.get_value(\"Has Role\", [[\"parent\", \"=\", frappe.session.user], ['role', \"=\", \"System Manager\"]]):\n    conditions = \"`tabSales Invoice`.name NOT IN (SELECT amended_from FROM `tabSales Invoice` WHERE amended_from IS NOT NULL)\"\n\n# if frappe.db.get_value(\"Has Role\", [[\"parent\", \"=\", frappe.session.user], ['role', \"=\", \"Warehouse User\"]]):\n#     conditions = \"is_return=1 AND workflow_state IN ('Pending Submission', 'Returned', 'Rejected Submission', 'Pending Cancellation', 'Discarded', 'Rejected Cancellation')\"",
  "script_type": "Permission Query"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-31 01:08:42.741257",
  "module": "Libya Customizations",
  "name": "Account - Permission Query",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Account",
  "script": "if frappe.db.get_value(\"Has Role\", [[\"parent\", \"=\", frappe.session.user], ['role', \"=\", \"Libya Team\"]]):\n    conditions = \"restrict_account_view='No'\"",
  "script_type": "Permission Query"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-25 09:27:06.103992",
  "module": "Libya Customizations",
  "name": "Item Price - Permission Query",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Item Price",
  "script": "if frappe.db.get_value(\"Has Role\", [[\"parent\", \"=\", frappe.session.user], ['role', \"=\", \"Libya Team\"]]):\n    conditions = \"selling=1\"",
  "script_type": "Permission Query"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-25 09:27:05.986576",
  "module": "Libya Customizations",
  "name": "Receipt Voucher - Permission Query",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Receipt Voucher",
  "script": "if not frappe.db.get_value(\"Has Role\", [[\"parent\", \"=\", frappe.session.user], ['role', \"=\", \"System Manager\"]]):\n    conditions = \"`tabReceipt Voucher`.name NOT IN (SELECT amended_from FROM `tabReceipt Voucher` WHERE amended_from IS NOT NULL)\"",
  "script_type": "Permission Query"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-25 09:27:05.886717",
  "module": "Libya Customizations",
  "name": "Payment Voucher - Permission Query",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Payment Voucher",
  "script": "if not frappe.db.get_value(\"Has Role\", [[\"parent\", \"=\", frappe.session.user], ['role', \"=\", \"System Manager\"]]):\n    conditions = \"`tabPayment Voucher`.name NOT IN (SELECT amended_from FROM `tabPayment Voucher` WHERE amended_from IS NOT NULL)\"",
  "script_type": "Permission Query"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-25 09:27:05.810268",
  "module": "Libya Customizations",
  "name": "Transfer Voucher - Permission Query",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Transfer Voucher",
  "script": "if not frappe.db.get_value(\"Has Role\", [[\"parent\", \"=\", frappe.session.user], ['role', \"=\", \"System Manager\"]]):\n    conditions = \"`tabTransfer Voucher`.name NOT IN (SELECT amended_from FROM `tabTransfer Voucher` WHERE amended_from IS NOT NULL)\"",
  "script_type": "Permission Query"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-25 09:27:05.701022",
  "module": "Libya Customizations",
  "name": "Debt Voucher - Permission Query",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Debt Voucher",
  "script": "if not frappe.db.get_value(\"Has Role\", [[\"parent\", \"=\", frappe.session.user], ['role', \"=\", \"System Manager\"]]):\n    conditions = \"`tabDebt Voucher`.name NOT IN (SELECT amended_from FROM `tabDebt Voucher` WHERE amended_from IS NOT NULL)\"",
  "script_type": "Permission Query"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-25 09:27:05.462582",
  "module": "Libya Customizations",
  "name": "Clearing Voucher - Permission Query",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Clearing Voucher",
  "script": "if not frappe.db.get_value(\"Has Role\", [[\"parent\", \"=\", frappe.session.user], ['role', \"=\", \"System Manager\"]]):\n    conditions = \"`tabClearing Voucher`.name NOT IN (SELECT amended_from FROM `tabClearing Voucher` WHERE amended_from IS NOT NULL)\"",
  "script_type": "Permission Query"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save (Submitted Document)",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-25 09:27:05.154078",
  "module": "Libya Customizations",
  "name": "Update Remarks in Sales Invoice (After Submit)",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Invoice",
  "script": "delivery_note = doc.items[0].delivery_note\ntext = \"\"\nif doc.is_return:\n    if doc.is_paid:\n        text = 'فاتورة مردودات مبيعات نقدية'\n    else:\n        text = 'فاتورة مردودات مبيعات آجلة'\nelse:\n    if doc.is_paid:\n        text = f'فاتورة مبيعات نقدية من إذن تسليم رقم {delivery_note}'\n    else:\n        text = f'فاتورة مبيعات آجلة من إذن تسليم رقم {delivery_note}'\n        \nfrappe.db.set_value('Sales Invoice', doc.name, 'remarks', text)\nfrappe.db.set_value('GL Entry', {\"voucher_type\":\"Sales Invoice\", \"voucher_no\": doc.name}, 'remarks', text)\n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-02-03 03:16:12.281524",
  "module": "Libya Customizations",
  "name": "Auto-Creation of Purchase Receipt Upon Submitting Purchase Invoice",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Invoice",
  "script": "items_to_load = []\nfor item in doc.items:\n    items_to_load.append({\n        'item_code': item.item_code,\n        'qty': item.qty,\n        'received_qty': item.qty,\n        'purchase_order': item.purchase_order,\n        'purchase_order_item': item.po_detail,\n        'purchase_invoice': doc.name,\n        'purchase_invoice_item': item.name,\n        'warehouse': frappe.db.get_value('Stock Settings', 'Stock Settings', 'default_warehouse'),\n        'rate': item.rate,\n        'price_list_rate': item.price_list_rate,\n        'expense_account': frappe.db.get_value('Company', doc.company, \"stock_received_but_not_billed\")\n    })\nif not doc.is_return and not doc.update_stock:\n    frappe.get_doc(dict(\n    doctype = 'Purchase Receipt',\n    title = doc.title,\n    supplier_delivery_note = doc.title,\n    supplier = doc.supplier,\n    company = doc.company,\n    docstatus = 0,\n    posting_date = frappe.utils.nowdate(),\n    posting_time = '00:00:00',\n    set_posting_time = 1,\n    currency = doc.currency,\n    conversion_rate = doc.conversion_rate,\n    disable_rounded_total = 1,\n    buying_price_list = doc.buying_price_list,\n    price_list_currency = doc.price_list_currency,\n    plc_conversion_rate = doc.plc_conversion_rate,\n    set_warehouse = frappe.db.get_value('Stock Settings', 'Stock Settings', 'default_warehouse'),\n    taxes_and_charges = doc.taxes_and_charges,\n    taxes = doc.taxes,\n    apply_discount_on = doc.apply_discount_on,\n    discount_amount = doc.discount_amount,\n    remarks = doc.title,\n    freight_account = doc.freight_account,\n    freight_account_currency = doc.freight_account_currency,\n    freight_amount = doc.freight_amount,\n    freight_exchange_rate = doc.freight_exchange_rate,\n    inspection_account = doc.inspection_account,\n    inspection_account_currency = doc.inspection_account_currency,\n    inspection_amount = doc.inspection_amount,\n    inspection_exchange_rate = doc.inspection_exchange_rate,\n    clearence_account = doc.clearence_account,\n    clearence_amount = doc.clearence_amount,\n    transport_account = doc.transport_account,\n    transport_amount = doc.transport_amount,\n    foreign_banking_charges_account = doc.foreign_banking_charges_account,\n    foreign_banking_charges_account_currency = doc.foreign_banking_charges_account_currency,\n    foreign_banking_charges_amount = doc.foreign_banking_charges_amount,\n    foreign_banking_charges_exchange_rate = doc.foreign_banking_charges_exchange_rate,\n    local_banking_charges_account = doc.local_banking_charges_account,\n    local_banking_charges_amount = doc.local_banking_charges_amount,\n    items = items_to_load\n)).insert(ignore_permissions=True)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-25 09:27:07.433349",
  "module": "Libya Customizations",
  "name": "Assigning Item Selling Prices Only for Libya Team",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Item Price",
  "script": "if frappe.db.get_value(\"Has Role\", [[\"parent\", \"=\", frappe.session.user], ['role', \"=\", \"Libya Team\"]]):\n    conditions = \"selling=1\"",
  "script_type": "Permission Query"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-25 09:27:07.379755",
  "module": "Libya Customizations",
  "name": "Update Accounts In Sales Invoice",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Invoice",
  "script": "discount_account = frappe.db.get_value(\"Company\", doc.company, \"default_sales_discount_account\")\nreturn_account = frappe.db.get_value(\"Company\", doc.company, \"default_sales_return_account\")\n\ndoc.additional_discount_account = discount_account\n\nif doc.is_return:\n    for item in doc.items:\n        item.income_account = return_account",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-25 09:27:05.214228",
  "module": "Libya Customizations",
  "name": "Update Remarks in Sales Invoice",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Invoice",
  "script": "delivery_note = doc.items[0].delivery_note\nif doc.is_opening == \"Yes\":\n    doc.remarks = \"فاتورة إفتتاحية\"\nelse:\n    if doc.is_return:\n        doc.remarks = \"فاتورة مردودات آجلة مبيعات\"\n    else:\n        doc.remarks = f\"فاتورة مبيعات آجلة من إذن تسليم رقم {delivery_note}\"",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-25 09:27:04.693089",
  "module": "Libya Customizations",
  "name": "Update Payment Status upon submit Sales Invoice",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Invoice",
  "script": "if not doc.is_paid and not doc.is_return:\n    doc.payment_status = \"Credit Invoice\"\nelif doc.is_paid and not doc.is_return:\n    doc.payment_status = \"Cash Invoice\"\nelif doc.is_return and not doc.is_paid:\n    doc.payment_status = \"Credit Return\"\nelif doc.is_paid and doc.is_return:\n    doc.payment_status = \"Cash Return\"",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Cancel",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-25 09:27:05.342016",
  "module": "Libya Customizations",
  "name": "Update Payment Status upon cancel Sales Invoice",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Invoice",
  "script": "doc.payment_status = \"Cancelled\"",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save (Submitted Document)",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-01-03 17:01:12.141120",
  "module": "Libya Customizations",
  "name": "Update Payment Status in Sales Invoice (After Submit)",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Invoice",
  "script": "if doc.is_opening == 'Yes':\n    doc.payment_status = \"Opening\"\nelif not doc.is_paid and not doc.is_return:\n    doc.payment_status = \"Credit Invoice\"\nelif doc.is_paid and not doc.is_return:\n    doc.payment_status = \"Cash Invoice\"\nelif doc.is_return and not doc.is_paid:\n    doc.payment_status = \"Credit Return\"\nelif doc.is_paid and doc.is_return:\n    doc.payment_status = \"Cash Return\"",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Cancel",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-28 10:41:22.332902",
  "module": "Libya Customizations",
  "name": "Change Document Status (Delivery Note) Before Cancel",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Delivery Note",
  "script": "doc.custom_status = \"Cancelled\"",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Cancel",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-28 10:41:22.595637",
  "module": "Libya Customizations",
  "name": "Change Document Status (Sales Invoice) Before Cancel",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Invoice",
  "script": "doc.custom_status = \"Cancelled\"",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-28 10:41:22.698733",
  "module": "Libya Customizations",
  "name": "Change Document Status (Sales Invoice) Before Submit",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Invoice",
  "script": "doc.custom_status = \"Submitted\"",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-28 10:41:22.761974",
  "module": "Libya Customizations",
  "name": "Change Document Status (Delivery Note) Before Submit",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Delivery Note",
  "script": "doc.custom_status = \"Submitted\"",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Cancel",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-28 10:41:22.868224",
  "module": "Libya Customizations",
  "name": "Change Document Status (Sales Order) Before Cancel",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Order",
  "script": "doc.custom_status = \"Cancelled\"",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-28 10:41:22.970302",
  "module": "Libya Customizations",
  "name": "Change Document Status (Sales Order) Before Submit",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Order",
  "script": "doc.custom_status = \"Submitted\"",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "Hourly",
  "modified": "2024-12-28 13:45:41.646557",
  "module": "Libya Customizations",
  "name": "Restarting Stuck Process Payment Reconciliation",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "first_time = frappe.utils.add_to_date(frappe.utils.now_datetime(), hours=-0.24) # for one hour\nsecond_time = frappe.utils.add_to_date(frappe.utils.now_datetime(), hours=-72) # for one hour\ndocs = frappe.db.get_list(\"Process Payment Reconciliation\", [[\"creation\", \"between\", [second_time, first_time]], [\"status\", \"=\", \"Running\"]])\nfor doc in docs:\n    frappe.call(\"erpnext.accounts.doctype.process_payment_reconciliation.process_payment_reconciliation.pause_job_for_doc\", docname = doc.name)\n    frappe.call(\"erpnext.accounts.doctype.process_payment_reconciliation.process_payment_reconciliation.trigger_job_for_doc\", docname = doc.name)\n",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": "*/30 * * * *",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "Cron",
  "modified": "2024-12-28 13:47:49.145507",
  "module": "Libya Customizations",
  "name": "Triggering Repost Item Valuation Every 30 Min",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "frappe.call(\"erpnext.stock.doctype.repost_item_valuation.repost_item_valuation.execute_repost_item_valuation\")",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": "0 */12 * * *",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "Cron",
  "modified": "2024-12-28 13:36:49.262857",
  "module": "Libya Customizations",
  "name": "Auto-Payment Reconcilliation",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "for invoice in frappe.db.get_list(\"Sales Invoice\", [[\"is_return\", \"=\", 0],[\"docstatus\", \"=\", 1],[\"outstanding_amount\", \"<\", 0]], ['name', 'company']):\n    linked_docs = frappe.call(\"erpnext.accounts.doctype.unreconcile_payment.unreconcile_payment.get_linked_payments_for_doc\", company = invoice.company, doctype= \"Sales Invoice\", docname=invoice.name)\n    selection_map = []\n    for elem in linked_docs:\n        if(elem.voucher_type == \"Payment Entry\"):\n            selection_map = [{\n    \t\t\t\"company\": elem.company,\n    \t\t\t\"voucher_type\": elem.voucher_type,\n    \t\t\t\"voucher_no\": elem.voucher_no,\n    \t\t\t\"against_voucher_type\": \"Sales Invoice\",\n    \t\t\t\"against_voucher_no\": invoice.name,\n    \t\t}]\n            try:\n                frappe.call(\"erpnext.accounts.doctype.unreconcile_payment.unreconcile_payment.create_unreconcile_doc_for_selection\", selections=json.dumps(selection_map));\n            except:\n                continue\nfor company in frappe.get_all(\"Company\"):\n    company = company.name\n    account = frappe.db.get_value(\"Company\", company, \"default_receivable_account\")\n    for customer in frappe.get_all(\"Customer\", {\"disabled\": 0}):\n        outstanding_documents = frappe.call('erpnext.accounts.doctype.payment_entry.payment_entry.get_outstanding_reference_documents', args = {'party_type':'Customer', 'party':customer.name, 'party_account':account}) or 0\n        flag = False\n        if outstanding_documents:\n            total = 0\n            for i in outstanding_documents:\n                if i.outstanding_amount > 0:\n                    flag = True\n                    break\n        if flag:\n            unallocated_amount = frappe.db.get_value(\"Payment Entry\", [[\"party\", \"=\", customer.name], [\"unallocated_amount\", \">\", 0], [\"docstatus\", \"=\", 1]], \"sum(unallocated_amount)\") or 0\n            credit_amount = frappe.db.get_value(\"Journal Entry Account\", [[\"party\", \"=\", customer.name], [\"credit\", \">\", 0], [\"reference_name\", \"=\", None], [\"docstatus\", \"=\", 1]], \"sum(credit)\") or 0\n            cn_amount = frappe.db.get_value(\"Sales Invoice\", [[\"customer\", \"=\", customer.name], [\"outstanding_amount\", \"<\", 0], [\"is_return\", \"=\", 1], [\"docstatus\", \"=\", 1]], \"sum(outstanding_amount)\") or 0\n            if unallocated_amount or credit_amount or cn_amount:\n                reconciliation = frappe.get_doc({\n                    \"doctype\": \"Process Payment Reconciliation\",\n                    \"party_type\": \"Customer\",\n                    \"party\" : customer.name,\n                    \"company\": company,\n                    \"receivable_payable_account\": account,\n                    \"default_advance_account\": account\n                }).insert()\n                reconciliation.save()\n                reconciliation.submit()\n",
  "script_type": "Scheduler Event"
 }
]