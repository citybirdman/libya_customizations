[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-11-12 13:44:17.117440",
  "module": "Libya Customizations",
  "name": "Auto-Creation of Purchase Receipt Upon Submitting Purchase Invoice",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Invoice",
  "script": "items_to_load = []\nfor item in doc.items:\n    items_to_load.append({\n        'item_code': item.item_code,\n        'qty': item.qty,\n        'received_qty': item.qty,\n        'purchase_order': item.purchase_order,\n        'purchase_order_item': item.po_detail,\n        'purchase_invoice': doc.name,\n        'purchase_invoice_item': item.name,\n        'warehouse': frappe.db.get_value('Stock Settings', 'Stock Settings', 'default_warehouse'),\n        'rate': item.rate,\n        'price_list_rate': item.price_list_rate,\n        'expense_account': frappe.db.get_value('Company', doc.company, \"stock_received_but_not_billed\")\n    })\nif not (doc.is_return and doc.update_stock):\n    frappe.get_doc(dict(\n    doctype = 'Purchase Receipt',\n    title = doc.title,\n    supplier_delivery_note = doc.title,\n    supplier = doc.supplier,\n    company = doc.company,\n    docstatus = 0,\n    posting_date = frappe.utils.nowdate(),\n    posting_time = '00:00:00',\n    set_posting_time = 1,\n    currency = doc.currency,\n    conversion_rate = doc.conversion_rate,\n    disable_rounded_total = 1,\n    buying_price_list = doc.buying_price_list,\n    price_list_currency = doc.price_list_currency,\n    plc_conversion_rate = doc.plc_conversion_rate,\n    set_warehouse = frappe.db.get_value('Stock Settings', 'Stock Settings', 'default_warehouse'),\n    taxes_and_charges = doc.taxes_and_charges,\n    taxes = doc.taxes,\n    apply_discount_on = doc.apply_discount_on,\n    discount_amount = doc.discount_amount,\n    remarks = doc.title,\n    items = items_to_load,\n)).insert(ignore_permissions=True)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-11-14 10:34:54.450105",
  "module": "Libya Customizations",
  "name": "Auto-Updating Purchase Receipt Management",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Receipt",
  "script": "for doc in frappe.db.get_list(\"Purchase Receipt\", [[\"docstatus\", \"!=\", 2]]):\n    existing_receipt_name = frappe.db.get_value('Purchase Receipt Management Detail', {'purchase_receipt':doc.name}, 'name')\n    if not existing_receipt_name:\n        frappe.get_doc(dict(\n        doctype = 'Purchase Receipt Management Detail',\n        parent = 'Purchase Receipt Management',\n        parenttype = 'Purchase Receipt Management',\n        parentfield = 'purchase_receipts',\n        purchase_receipt = doc.name,\n        shipment_name = doc.title,\n        total_qty = doc.total_qty,\n        grand_total = doc.grand_total,\n        currency = doc.currency\n    )).insert(ignore_permissions=True)\n    if existing_receipt_name:\n        existing_receipt = frappe.get_doc('Purchase Receipt Management Detail', existing_receipt_name)\n        existing_receipt.update({\n        'purchase_receipt': doc.name,\n        'shipment_name': doc.title,\n        'total_qty': doc.total_qty,\n        'grand_total': doc.grand_total,\n        'currency': doc.currency\n        })\n        existing_receipt.save(ignore_permissions=True)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-11-11 10:17:40.586136",
  "module": "Libya Customizations",
  "name": "purchse receipt managment add records",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Receipt Management",
  "script": "for doc in frappe.db.get_list(\"Purchase Receipt\", [[\"docstatus\", \"!=\", 2]], [\"name\", \"title\", \"total_qty\", \"grand_total\", \"currency\", \"posting_date\"], order_by=\"Posting_date Desc\"):\n    existing_receipt_name = frappe.db.get_value('Purchase Receipt Management Detail', {'purchase_receipt':doc.name}, 'name')\n    if not existing_receipt_name:\n        frappe.get_doc(dict(\n        doctype = 'Purchase Receipt Management Detail',\n        parent = 'Purchase Receipt Management',\n        parenttype = 'Purchase Receipt Management',\n        parentfield = 'purchase_receipts',\n        purchase_receipt = doc.name,\n        shipment_name = doc.title,\n        total_qty = doc.total_qty,\n        grand_total = doc.grand_total,\n        currency = doc.currency\n    )).insert(ignore_permissions=True)\n    if existing_receipt_name:\n        existing_receipt = frappe.get_doc('Purchase Receipt Management Detail', existing_receipt_name)\n        existing_receipt.update({\n        'purchase_receipt': doc.name,\n        'shipment_name': doc.title,\n        'total_qty': doc.total_qty,\n        'grand_total': doc.grand_total,\n        'currency': doc.currency,\n        })\n        existing_receipt.save(ignore_permissions=True)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "create_dn_from_so",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-11-13 17:26:47.576168",
  "module": "Libya Customizations",
  "name": "Creating Delivery Note from Sales Order",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "draft_linked_dn = frappe.db.get_list('Delivery Note Item', {'against_sales_order':doc.name, 'docstatus':0}, 'name')\nif draft_linked_dn:\n    frappe.msgprint(msg=_(f\"There is a draft Delivery Note {draft_linked_dn[0]}, please delete or submit it to move forward\"), title=_('Error'), indicator='red') \n    raise frappe.ValidationError\nelse:\n    items_to_load = []\n    for item in doc.items:\n        if item.qty - item.delivered_qty > 0:\n            items_to_load.append({\n                'item_code': item.item_code,\n                'qty': item.qty - item.delivered_qty,\n                'against_sales_order': doc.name,\n                'so_detail':item.name,\n                'warehouse': doc.set_warehouse,\n                'rate': item.rate,\n                'price_list_rate': item.price_list_rate\n            })\n    frappe.get_doc(dict(\n    doctype = 'Delivery Note',\n    customer = doc.customer,\n    company = doc.company,\n    docstatus = 0,\n    posting_date = frappe.utils.nowdate(),\n    posting_time = frappe.utils.nowtime(),\n    set_posting_time = 1,\n    territory = doc.territory,\n    set_warehouse = doc.set_warehouse,\n    selling_price_list = doc.selling_price_list,\n    additional_discount_percentage = doc.additional_discount_percentage,\n    taxes = doc.taxes,\n    sales_team = doc.sales_team,\n    items = items_to_load\n    )).insert(ignore_permissions=True)",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-11-13 13:33:12.838227",
  "module": "Libya Customizations",
  "name": "Overdues Validation in Sales Order",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Order",
  "script": "bypass_overdue_check = frappe.db.get_value('Customer', doc.customer, 'bypass_overdue_check')\nuser_has_cso = frappe.db.get_value(\"Has Role\", [[\"parent\", \"=\", frappe.session.user], ['role', \"=\", \"Chief Sales Officer\"]])\noutstanding = frappe.db.get_value('Sales Invoice', {'docstatus': 1, 'customer': doc.customer, 'posting_date': ['<', frappe.utils.add_days(frappe.utils.nowdate(), - credit_days)]}, 'sum(outstanding_amount)')\noutstanding = outstanding if outstanding else 0\ncredit_days = frappe.db.get_value('Payment Terms Template Detail', {'parent': doc.payment_terms_template}, 'credit_days')\n\nif outstanding > 0 and not (bypass_overdue_check and user_has_cso):\n    frappe.msgprint(msg=_(f\"There are overdue outstandings valued at {outstanding:,f} against the Customer\"), title=_('Error'), indicator='red')\n    raise frappe.ValidationError\nelif outstanding > 0 and (bypass_overdue_check or user_has_cso):\n    frappe.msgprint(msg=_(f\"There are overdue outstandings valued at {outstanding:,f} against the Customer\"), title=_('Warning'), indicator='orange')",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-11-15 09:12:16.327425",
  "module": "Libya Customizations",
  "name": "Assigning Item Selling Prices Only for Libya Team",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Item Price",
  "script": "if frappe.db.get_value(\"Has Role\", [[\"parent\", \"=\", frappe.session.user], ['role', \"=\", \"Libya Team\"]]):\n    conditions = \"selling=1\"",
  "script_type": "Permission Query"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-11-18 08:55:35.660741",
  "module": "Libya Customizations",
  "name": "Update Accounts In Sales Invoice",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Invoice",
  "script": "discount_account = frappe.db.get_value(\"Company\", doc.company, \"default_sales_discount_account\")\nreturn_account = frappe.db.get_value(\"Company\", doc.company, \"default_sales_return_account\")\n\ndoc.additional_discount_account = discount_account\n\nif doc.is_return:\n    for item in doc.items:\n        item.income_account = return_account",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-11-18 11:24:48.200205",
  "module": "Libya Customizations",
  "name": "Update Remarks in Sales Invoice",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Invoice",
  "script": "delivery_note = doc.items[0].delivery_note\nif doc.is_opening == \"Yes\":\n    doc.remarks = \"فاتورة إفتتاحية\"\nelse:\n    if doc.is_return:\n        doc.remarks = \"فاتورة مردودات مبيعات\"\n    else:\n        doc.remarks = f\"فاتورة مبيعات من إذن تسليم رقم {delivery_note}\"",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-11-19 17:09:53.866618",
  "module": "Libya Customizations",
  "name": "Filtering Ready Sales Orders for Warehouse User",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Order",
  "script": "if frappe.db.get_value(\"Has Role\", [[\"parent\", \"=\", frappe.session.user], ['role', \"=\", \"Warehouse User\"]]):\n    conditions = \"docstatus=1 AND reservation_status='Reserve with Delivery'AND delivery_status IN ('Not Delivered', 'Partly Delivered')\"",
  "script_type": "Permission Query"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-11-19 20:15:13.299142",
  "module": "Libya Customizations",
  "name": "Filtering Sales Returns for Warehouse User",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Invoice",
  "script": "if frappe.db.get_value(\"Has Role\", [[\"parent\", \"=\", frappe.session.user], ['role', \"=\", \"Warehouse User\"]]):\n    conditions = \"docstatus=1 AND is_return=1 AND workflow_state IN ('Pending for Review', 'Return')\"",
  "script_type": "Permission Query"
 }
]